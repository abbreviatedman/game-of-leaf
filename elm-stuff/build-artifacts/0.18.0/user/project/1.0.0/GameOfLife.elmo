var _user$project$GameOfLife$isFirstInRow = function (point) {
	return _elm_lang$core$Native_Utils.eq(point.x, 0);
};
var _user$project$GameOfLife$isAlive = function (point) {
	return _elm_lang$core$Native_Utils.eq(point.cellStatus, 1);
};
var _user$project$GameOfLife$boardRowsAndColumns = 20;
var _user$project$GameOfLife$handleEdges = function (coord) {
	return (_elm_lang$core$Native_Utils.cmp(coord, 0) < 0) ? (coord + _user$project$GameOfLife$boardRowsAndColumns) : ((_elm_lang$core$Native_Utils.cmp(coord, _user$project$GameOfLife$boardRowsAndColumns) > -1) ? (coord - _user$project$GameOfLife$boardRowsAndColumns) : coord);
};
var _user$project$GameOfLife$step = function (points) {
	var numNeighbors = A2(
		_elm_lang$core$Array$map,
		function (point) {
			return ((((((function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x - 1) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y - 1)),
						points))) + function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y - 1)),
						points)))) + function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x + 1) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y - 1)),
						points)))) + function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x - 1) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y)),
						points)))) + function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x + 1) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y)),
						points)))) + function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x - 1) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y + 1)),
						points)))) + function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y + 1)),
						points)))) + function (_) {
				return _.cellStatus;
			}(
				A2(
					_elm_lang$core$Maybe$withDefault,
					{x: 0, y: 0, cellStatus: 0},
					A2(
						_elm_lang$core$Array$get,
						_user$project$GameOfLife$handleEdges(point.x + 1) + (_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$handleEdges(point.y + 1)),
						points)));
		},
		points);
	return A2(
		_elm_lang$core$Array$indexedMap,
		F2(
			function (index, point) {
				var thisOnesNeighbors = A2(
					_elm_lang$core$Maybe$withDefault,
					0,
					A2(_elm_lang$core$Array$get, index, numNeighbors));
				return _user$project$GameOfLife$isAlive(point) ? (((_elm_lang$core$Native_Utils.cmp(thisOnesNeighbors, 2) < 0) || (_elm_lang$core$Native_Utils.cmp(thisOnesNeighbors, 3) > 0)) ? _elm_lang$core$Native_Utils.update(
					point,
					{cellStatus: 0}) : point) : (_elm_lang$core$Native_Utils.eq(thisOnesNeighbors, 3) ? _elm_lang$core$Native_Utils.update(
					point,
					{cellStatus: 1}) : point);
			}),
		points);
};
var _user$project$GameOfLife$update = F2(
	function (msg, oldModel) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'NoOp':
				return oldModel;
			case 'ToggleCell':
				var _p1 = _p0._0;
				var newPoint = _elm_lang$core$Native_Utils.update(
					_p1,
					{
						cellStatus: _elm_lang$core$Basics$abs(_p1.cellStatus - 1)
					});
				var y = _p1.y;
				var x = _p1.x;
				return _elm_lang$core$Native_Utils.update(
					oldModel,
					{
						points: A3(_elm_lang$core$Array$set, x + (_user$project$GameOfLife$boardRowsAndColumns * y), newPoint, oldModel.points)
					});
			default:
				return _elm_lang$core$Native_Utils.update(
					oldModel,
					{
						points: _user$project$GameOfLife$step(oldModel.points)
					});
		}
	});
var _user$project$GameOfLife$Point = F3(
	function (a, b, c) {
		return {y: a, x: b, cellStatus: c};
	});
var _user$project$GameOfLife$Model = function (a) {
	return {points: a};
};
var _user$project$GameOfLife$model = _user$project$GameOfLife$Model(
	A2(
		_elm_lang$core$Array$initialize,
		_user$project$GameOfLife$boardRowsAndColumns * _user$project$GameOfLife$boardRowsAndColumns,
		function (index) {
			return {
				y: (index / _user$project$GameOfLife$boardRowsAndColumns) | 0,
				x: A2(_elm_lang$core$Basics_ops['%'], index, _user$project$GameOfLife$boardRowsAndColumns),
				cellStatus: 0
			};
		}));
var _user$project$GameOfLife$ToggleCell = function (a) {
	return {ctor: 'ToggleCell', _0: a};
};
var _user$project$GameOfLife$chooseColor = function (point) {
	return _elm_lang$core$Native_Utils.eq(point.cellStatus, 1) ? A2(
		_elm_lang$html$Html$td,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('tdAlive'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$GameOfLife$ToggleCell(point)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$td,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('tdDead'),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$button,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$GameOfLife$ToggleCell(point)),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text(' '),
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		});
};
var _user$project$GameOfLife$Step = {ctor: 'Step'};
var _user$project$GameOfLife$view = function (oldModel) {
	var firstsInEachRow = A2(_elm_lang$core$Array$filter, _user$project$GameOfLife$isFirstInRow, oldModel.points);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$p,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('Game of Leaf'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$table,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('board'),
						_1: {ctor: '[]'}
					},
					_elm_lang$core$Array$toList(
						A2(
							_elm_lang$core$Array$map,
							function (firstPoint) {
								return A2(
									_elm_lang$html$Html$tr,
									{ctor: '[]'},
									_elm_lang$core$Array$toList(
										A2(
											_elm_lang$core$Array$map,
											function (point) {
												return _elm_lang$core$Native_Utils.eq(point.cellStatus, 1) ? A2(
													_elm_lang$html$Html$td,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('tdAlive'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	_user$project$GameOfLife$ToggleCell(point)),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													}) : A2(
													_elm_lang$html$Html$td,
													{
														ctor: '::',
														_0: _elm_lang$html$Html_Attributes$class('tdDead'),
														_1: {ctor: '[]'}
													},
													{
														ctor: '::',
														_0: A2(
															_elm_lang$html$Html$button,
															{
																ctor: '::',
																_0: _elm_lang$html$Html_Events$onClick(
																	_user$project$GameOfLife$ToggleCell(point)),
																_1: {ctor: '[]'}
															},
															{
																ctor: '::',
																_0: _elm_lang$html$Html$text(' '),
																_1: {ctor: '[]'}
															}),
														_1: {ctor: '[]'}
													});
											},
											A2(
												_elm_lang$core$Array$filter,
												function (point) {
													return _elm_lang$core$Native_Utils.eq(point.y, firstPoint.y);
												},
												oldModel.points))));
							},
							firstsInEachRow))),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('btn btn-success'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(_user$project$GameOfLife$Step),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$span,
								{ctor: '[]'},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text('Step'),
									_1: {ctor: '[]'}
								}),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		});
};
var _user$project$GameOfLife$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$GameOfLife$model, view: _user$project$GameOfLife$view, update: _user$project$GameOfLife$update})();
var _user$project$GameOfLife$NoOp = {ctor: 'NoOp'};
